Description: fix compilation errors (on arm64 only) of the type
  error: use of overloaded operator '=' is ambiguous (with operand types 'RTCStatsMember<std::string>' (aka 'RTCStatsMember<basic_string<char, char_traits<char>, allocator<char>>>') and 'const char *')
Author: Olivier Tilloy <olivier.tilloy@canonical.com>

--- a/third_party/webrtc/pc/rtc_stats_collector.cc
+++ b/third_party/webrtc/pc/rtc_stats_collector.cc
@@ -352,8 +352,8 @@ std::unique_ptr<RTCInboundRTPStreamStats
       timestamp_us);
   SetInboundRTPStreamStatsFromMediaReceiverInfo(voice_receiver_info,
                                                 inbound_audio.get());
-  inbound_audio->media_type = "audio";
-  inbound_audio->kind = "audio";
+  inbound_audio->media_type = std::string("audio");
+  inbound_audio->kind = std::string("audio");
   if (voice_receiver_info.codec_payload_type) {
     inbound_audio->codec_id = RTCCodecStatsIDFromMidDirectionAndPayload(
         mid, /*inbound=*/true, *voice_receiver_info.codec_payload_type);
@@ -420,7 +420,7 @@ CreateRemoteOutboundAudioStreamStats(
   // Populate.
   // - RTCRtpStreamStats.
   stats->ssrc = voice_receiver_info.ssrc();
-  stats->kind = "audio";
+  stats->kind = std::string("audio");
   stats->transport_id = transport_id;
   stats->codec_id = RTCCodecStatsIDFromMidDirectionAndPayload(
       mid,
@@ -454,8 +454,8 @@ void SetInboundRTPStreamStatsFromVideoRe
     RTCInboundRTPStreamStats* inbound_video) {
   SetInboundRTPStreamStatsFromMediaReceiverInfo(video_receiver_info,
                                                 inbound_video);
-  inbound_video->media_type = "video";
-  inbound_video->kind = "video";
+  inbound_video->media_type = std::string("video");
+  inbound_video->kind = std::string("video");
   if (video_receiver_info.codec_payload_type) {
     inbound_video->codec_id = RTCCodecStatsIDFromMidDirectionAndPayload(
         mid, /*inbound=*/true, *video_receiver_info.codec_payload_type);
@@ -502,7 +502,7 @@ void SetInboundRTPStreamStatsFromVideoRe
   // TODO(bugs.webrtc.org/10529): When info's `content_info` is optional
   // support the "unspecified" value.
   if (video_receiver_info.content_type == VideoContentType::SCREENSHARE)
-    inbound_video->content_type = RTCContentType::kScreenshare;
+    inbound_video->content_type = std::string(RTCContentType::kScreenshare);
   if (!video_receiver_info.decoder_implementation_name.empty()) {
     inbound_video->decoder_implementation =
         video_receiver_info.decoder_implementation_name;
@@ -550,8 +550,8 @@ void SetOutboundRTPStreamStatsFromVideoS
     RTCOutboundRTPStreamStats* outbound_video) {
   SetOutboundRTPStreamStatsFromMediaSenderInfo(video_sender_info,
                                                outbound_video);
-  outbound_video->media_type = "video";
-  outbound_video->kind = "video";
+  outbound_video->media_type = std::string("video");
+  outbound_video->kind = std::string("video");
   if (video_sender_info.codec_payload_type) {
     outbound_video->codec_id = RTCCodecStatsIDFromMidDirectionAndPayload(
         mid, /*inbound=*/false, *video_sender_info.codec_payload_type);
@@ -596,7 +596,7 @@ void SetOutboundRTPStreamStatsFromVideoS
   // TODO(https://crbug.com/webrtc/10529): When info's `content_info` is
   // optional, support the "unspecified" value.
   if (video_sender_info.content_type == VideoContentType::SCREENSHARE)
-    outbound_video->content_type = RTCContentType::kScreenshare;
+    outbound_video->content_type = std::string(RTCContentType::kScreenshare);
   if (!video_sender_info.encoder_implementation_name.empty()) {
     outbound_video->encoder_implementation =
         video_sender_info.encoder_implementation_name;
@@ -622,7 +622,7 @@ ProduceRemoteInboundRtpStreamStatsFromRe
       /*timestamp=*/report_block_data.report_block_timestamp_utc_us());
   remote_inbound->ssrc = report_block.source_ssrc;
   remote_inbound->kind =
-      media_type == cricket::MEDIA_TYPE_AUDIO ? "audio" : "video";
+      media_type == cricket::MEDIA_TYPE_AUDIO ? std::string("audio") : std::string("video");
   remote_inbound->packets_lost = report_block.packets_lost;
   remote_inbound->fraction_lost =
       static_cast<double>(report_block.fraction_lost) / (1 << 8);
@@ -1504,7 +1504,7 @@ void RTCStatsCollector::ProduceDataChann
     data_channel_stats->label = std::move(stats.label);
     data_channel_stats->protocol = std::move(stats.protocol);
     data_channel_stats->data_channel_identifier = stats.id;
-    data_channel_stats->state = DataStateToRTCDataChannelState(stats.state);
+    data_channel_stats->state = std::string(DataStateToRTCDataChannelState(stats.state));
     data_channel_stats->messages_sent = stats.messages_sent;
     data_channel_stats->bytes_sent = stats.bytes_sent;
     data_channel_stats->messages_received = stats.messages_received;
@@ -1545,7 +1545,7 @@ void RTCStatsCollector::ProduceIceCandid
         candidate_pair_stats->remote_candidate_id = ProduceIceCandidateStats(
             timestamp_us, info.remote_candidate, false, transport_id, report);
         candidate_pair_stats->state =
-            IceCandidatePairStateToRTCStatsIceCandidatePairState(info.state);
+            std::string(IceCandidatePairStateToRTCStatsIceCandidatePairState(info.state));
         candidate_pair_stats->priority = info.priority;
         candidate_pair_stats->nominated = info.nominated;
         // TODO(hbos): This writable is different than the spec. It goes to
@@ -2025,7 +2025,7 @@ void RTCStatsCollector::ProduceTransport
       transport_stats->bytes_received = 0;
       transport_stats->packets_received = 0;
       transport_stats->dtls_state =
-          DtlsTransportStateToRTCDtlsTransportState(channel_stats.dtls_state);
+          std::string(DtlsTransportStateToRTCDtlsTransportState(channel_stats.dtls_state));
       transport_stats->selected_candidate_pair_changes =
           channel_stats.ice_transport_stats.selected_candidate_pair_changes;
       for (const cricket::ConnectionInfo& info :
