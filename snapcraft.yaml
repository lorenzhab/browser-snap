name: chromium
adopt-info: chromium
summary: Chromium web browser, open-source version of Chrome
description: |
 An open-source browser project that aims to build a safer, faster, and more
 stable way for all Internet users to experience the web.
confinement: strict
base: core18
assumes:
  - snapd2.43 # for 'snapctl is-connected', used in chromium.launcher
compression: lzo

apps:
  chromium:
    extensions: [gnome-3-28]
    command: bin/chromium.launcher
    desktop: bin/chromium.desktop
    common-id: chromium-browser.desktop
    environment:
      DISABLE_WAYLAND: 1
      CHROME_DESKTOP: chromium.desktop
      CHROME_CONFIG_HOME: $SNAP_USER_COMMON
    plugs:
      - audio-playback
      - audio-record
      - bluez # for Web Bluetooth (https://launchpad.net/bugs/1887201)
      - camera
      - cups-control
      - home
      - joystick
      - mount-observe
      - network
      - network-manager
      - password-manager-service
      - pulseaudio # remove once snapd 2.41 is available everywhere
      - raw-usb # for WebUSB (https://launchpad.net/bugs/1780678)
      - removable-media
      - screen-inhibit-control
      - system-packages-doc
      - u2f-devices
      - unity7 # required for xdg-open to work
      - upower-observe
    slots:
      - mpris
  chromedriver:
    extensions: [gnome-3-28]
    command: usr/lib/chromium-browser/chromedriver
    plugs:
      - network-bind
      # + all the plugs required by chromium, so that when chromedriver
      # executes chromium it inherits the correct set of permissions
      - audio-playback
      - audio-record
      - bluez
      - camera
      - cups-control
      - home
      - joystick
      - mount-observe
      - network
      - network-manager
      - password-manager-service
      - pulseaudio # remove once snapd 2.41 is available everywhere
      - raw-usb
      - removable-media
      - screen-inhibit-control
      - system-packages-doc
      - u2f-devices
      - unity7
      - upower-observe
    slots:
      - mpris

plugs:
  browser-sandbox:
    interface: browser-support
    allow-sandbox: true
  chromium-config:
    interface: personal-files
    read: [$HOME/.config/chromium, $HOME/.chromium-browser.init]
  etc-chromium-browser-policies:
    interface: system-files
    read: [/etc/chromium-browser/policies]

layout:
  /usr/lib/man-db:
    bind: $SNAP/usr/lib/man-db

parts:
  # Launchpad builders have a timeout for how long they are allowed to access
  # the internet (through a proxy) starting from the start of the build.
  # Since the chromium part takes a long time to build, we need to ensure
  # that all other parts that need to access the internet (to e.g. fetch build
  # or stage packages) are built before it (before the proxy authentication is
  # revoked).

  chromium-build:
    plugin: dump
    source: build
    organize:
      '*' : build/
    override-prime: ""

  chromium:
    plugin: nil
    source: https://commondatastorage.googleapis.com/chromium-browser-official/chromium-90.0.4430.85.tar.xz
    source-checksum: sha512/90aac1f0b676e1ca5ccb9a362abb475945c1944686a8aba08509cde105a974ef115ca3ea56e3a88737bec7d0ae3ac1482d9c844cb14adc8f1bc06ac41ad60791
    after:
      - chromium-build
      - gtk3-locales
      - launcher
      - manpage
      - gtk-key-themes
      - libva
      - mesa-va-drivers
      - intel-vaapi-driver
      - intel-media-driver
      - pipewire
    build-packages:
      - quilt
      - wget
      - make
      - g++
      - autoconf
      - automake
      - ninja-build
      - pkg-config
      - lsb-release
      - python
      - python-pkg-resources
      - bison
      - flex
      - gawk
      - git
      - gperf
      - subversion
      - sed
      - gzip
      - default-jre-headless
      - libxml2-dev
      - libpulse-dev
      - libcups2-dev
      - libasound2-dev
      - libnss3-dev
      - mesa-common-dev
      - libgles2-mesa-dev
      - libpci-dev
      - libxtst-dev
      - libxss-dev
      - libglib2.0-dev
      - libudev-dev
      - libdrm-dev
      - libcap-dev
      - libgcrypt20-dev
      - libkrb5-dev
      - libxkbcommon-dev
      - libpam0g-dev
      - libffi-dev
      - libgbm-dev
      - libssl-dev
      - python-xcbgen
      - xcb-proto
      - uuid-dev
      - chrpath
      - yasm
      - zlib1g-dev
    stage-packages:
      - libnss3
      - libxss1
    override-pull: |
      set -eux
      snapcraftctl pull
      . chrome/VERSION
      snapcraftctl set-version "$MAJOR.$MINOR.$BUILD.$PATCH"
    override-build: |
      set -eux

      QUILT_PATCHES=$SNAPCRAFT_STAGE/build/chromium-patches QUILT_PC=.pc.chromium-patches quilt push -a

      # Fetch the dirmd executable from Google's servers
      # (it is not included in the source tarball).
      ./third_party/depot_tools/dirmd help
      [ -x ./third_party/depot_tools/.cipd_bin/dirmd ]

      # Get the Node.js binaries needed to build chromium's WebUI
      if [ $(arch) = "i686" ]; then
        # As of Node.js 10, Linux x86 is in the Experimental Tier
        # (see https://github.com/nodejs/node/blob/master/BUILDING.md#strategy),
        # meaning that upstream doesn't distribute binaries,
        # so we need to build them from source.
        cd third_party/node
        NODE_VERSION=$(grep NODE_VERSION= update_node_binaries | cut -d\" -f2)
        NODE_DIST_BASE_URL=$(grep BASE_URL= update_node_binaries | cut -d\" -f2)
        wget -O - $NODE_DIST_BASE_URL/$NODE_VERSION/node-$NODE_VERSION.tar.xz | tar -x --xz
        cd node-$NODE_VERSION
        ./configure --prefix=
        make -j$SNAPCRAFT_PARALLEL_BUILD_COUNT
        DESTDIR=$PWD/../linux/node-linux-x64 PREFIX= make install
        cd ../../..
      else
        third_party/node/update_node_binaries
      fi

      # Pre-built binaries are provided for eu-strip and clang on x86-64,
      # for all other architectures they have to be built from source.
      if [ $(arch) = "x86_64" ]; then
        tools/clang/scripts/update.py
      else
        cd buildtools/third_party/eu-strip
        ./build.sh
        cd ../../..

        # Building clang requires a version of cmake newer than what's in
        # bionic. Fetch it and build it from source.
        CMAKE_VERSION=3.18.1
        wget -O - https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION.tar.gz | tar -x -z
        cd cmake-$CMAKE_VERSION
        ./bootstrap --prefix=/usr
        make -j$SNAPCRAFT_PARALLEL_BUILD_COUNT install
        cd ..

        # Fetch and build clang from source.
        tools/clang/scripts/build.py --skip-build --without-android --without-fuchsia
        QUILT_PATCHES=$SNAPCRAFT_STAGE/build/llvm-patches QUILT_PC=.pc.llvm-patches quilt push -a
        tools/clang/scripts/build.py --skip-checkout --bootstrap --disable-asserts --pgo --without-android --without-fuchsia --gcc-toolchain=/usr --use-system-cmake
      fi

      # Build GN
      export CXX=$PWD/third_party/llvm-build/Release+Asserts/bin/clang++
      export AR=$PWD/third_party/llvm-build/Release+Asserts/bin/llvm-ar
      cp tools/gn/bootstrap/last_commit_position.h tools/gn/src/
      tools/gn/bootstrap/bootstrap.py --skip-generate-buildfiles

      # Build chromium
      OUT=out/Release
      mkdir -p $OUT
      cp $SNAPCRAFT_STAGE/build/args.gn $OUT/
      if [ $(arch) = "armv7l" ]; then
        # Do not build with NEON on armhf (https://launchpad.net/bugs/1884856)
        echo "arm_use_neon = false" >> $OUT/args.gn
      fi
      export PKG_CONFIG_PATH=$SNAPCRAFT_STAGE/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/pkgconfig
      $OUT/gn gen $OUT
      ninja -C $OUT chrome chrome_sandbox chromedriver

      # Strip debug symbols off the chrome binary
      python build/gn_run_binary.py ./buildtools/third_party/eu-strip/bin/eu-strip $OUT/chrome

      # Install to $SNAPCRAFT_PART_INSTALL
      mkdir -p $SNAPCRAFT_PART_INSTALL
      cp chrome/app/theme/chromium/product_logo_256.png $SNAPCRAFT_PART_INSTALL/chromium.png
      T=$SNAPCRAFT_PART_INSTALL/usr/lib/chromium-browser
      mkdir -p $T
      cd $OUT
      cp chrome chromedriver \
          chrome_*.pak headless_lib.pak resources.pak \
          icudtl.dat \
          libEGL.so libGLESv2.so libffmpeg.so \
          snapshot_blob.bin v8_context_snapshot.bin \
          $T/
      cp chrome_sandbox $T/chrome-sandbox
      mkdir $T/locales
      cp locales/*.pak $T/locales/
      if [ -d swiftshader ]; then
        # not built on arm*
        mkdir $T/swiftshader
        cp swiftshader/*.so $T/swiftshader/
      fi

      # Fix setuid bits on the sandbox executable
      # (ref: https://forum.snapcraft.io/t/call-for-testing-chromium-snap/1714/16)
      chmod 4555 $SNAPCRAFT_PART_INSTALL/usr/lib/chromium-browser/chrome-sandbox

      # Generate and install the man page (see the "manpage" part)
      mkdir -p $SNAPCRAFT_PART_INSTALL/man1
      sed \
          -e "s/@@PACKAGE@@/chromium/g" \
          -e "s/@@MENUNAME@@/chromium/g" \
          -e "s:\$HOME/.config:\$SNAP_USER_DATA/.config:g" \
          -e "s:\$HOME/.cache:\$SNAP_USER_COMMON/.cache:g" \
          $SNAPCRAFT_PART_SRC/chrome/app/resources/manpage.1.in \
          > $SNAPCRAFT_PART_INSTALL/man1/chrome.1
      gzip -9n $SNAPCRAFT_PART_INSTALL/man1/chrome.1
    prime:
      - -etc/init.d
      - -etc/xdg
      - -usr/include
      - -usr/share/doc
      - -usr/share/lintian
      - -usr/share/man

  launcher:
    plugin: dump
    source: launcher
    organize:
      '*': bin/

  firstrun:
    plugin: dump
    source: firstrun
    organize:
      '*': firstrun/

  tests:
    plugin: dump
    source: tests
    organize:
      '*': tests/

  # Stage packages required for the "man" binary, which is invoked when
  # chromium is called with the "-h" (or "--help") argument
  # (see https://launchpad.net/bugs/1848083).
  manpage:
    plugin: nil
    stage-packages:
      - groff-base
      - libgdbm5
      - libpipeline1
      - man-db
    prime:
      - -etc
      - -usr/lib/tmpfiles.d
      - -usr/share/bug
      - -usr/share/calendar
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - -usr/share/man
      - -usr/share/man-db
      - -var

  # Install the keybindings themes (see https://launchpad.net/bugs/1849163)
  gtk-key-themes:
    plugin: nil
    stage-packages:
      - libgtk-3-common
    prime:
      - usr/share/themes/Default/
      - usr/share/themes/Emacs/

  # In Ubuntu compiled locales for GTK are installed by langpacks, not by
  # libgtk-3-common. Fetch all the langpacks and keep only the GTK locales.
  gtk3-locales:
    plugin: nil
    source: empty # work around a snapcraft 2.x bug
    build-packages:
      - apt
      - dpkg
    override-pull: |
      set -eux
      apt download "language-pack-gnome-*-base"
    override-build: |
      set -eux
      for deb in *.deb; do dpkg-deb -x $deb .; done
      find usr/share/locale-langpack -type f -not -name "gtk30*.mo" -exec rm '{}' \;
      mkdir -p $SNAPCRAFT_PART_INSTALL/usr/share
      cp -R usr/share/locale-langpack $SNAPCRAFT_PART_INSTALL/usr/share/

  # Create a symlink xdg-email -> xdg-open, as the latter is perfectly able to
  # handle mailto: URLs (see https://launchpad.net/bugs/1849774).
  # xdg-open is a wrapper provided by the core snap.
  xdg-email:
    plugin: nil
    override-pull: ""
    override-prime: |
      set -eux
      mkdir -p usr/bin
      cd usr/bin
      ln -s /usr/bin/xdg-open xdg-email

  # Build and install a more recent version of the VA-API library than what is
  # available in 18.04, because newer drivers depend on a newer version of the
  # ABI.
  libva:
    source: https://github.com/intel/libva/releases/download/2.9.0/libva-2.9.0.tar.bz2
    source-checksum: sha1/3e20605243096b4e935e1ef6ac7797efbacc44f6
    after: [chromium-build]
    plugin: meson
    meson-parameters: ["--prefix=/usr", "-Dbuildtype=release", "-Dstrip=true"]
    build-packages:
      - gcc
      - libc6-dev
      - libdrm-dev
      - libgl1-mesa-dev
      - libwayland-dev
      - libx11-dev
      - libxext-dev
      - libxfixes-dev
      - pkg-config
      - quilt
    prime:
      - -etc
      - -usr/include
      - -usr/lib/*/pkgconfig
      - -usr/share
    override-build: |
      set -eux
      QUILT_PATCHES=$SNAPCRAFT_STAGE/build/libva-patches quilt push -a
      snapcraftctl build

  # gallium drivers
  mesa-va-drivers:
    plugin: nil
    stage-packages:
      - mesa-va-drivers
    prime:
      - usr/lib/x86_64-linux-gnu/dri/*_drv_video.so

  # i965_drv_video.so
  intel-vaapi-driver:
    after: [ libva ]
    source: https://github.com/intel/intel-vaapi-driver/releases/download/2.4.1/intel-vaapi-driver-2.4.1.tar.bz2
    source-checksum: sha1/c998e06f13238c6419bb38ede9a13e453312737b
    plugin: meson
    meson-parameters: ["--prefix=/usr", "-Dbuildtype=release"]
    build-packages:
      - gcc
      - libdrm-dev
      - libwayland-bin
      - libwayland-dev
      - pkg-config
    override-build: |
      if [ $(arch) = "x86_64" -o $(arch) = "i686" ]; then
        snapcraftctl build
      fi
    stage-packages:
      - on amd64,i386:
        - libdrm2
        - libdrm-intel1
        - libpciaccess0
    prime:
      - -usr/share

  intel-gmmlib:
    source: https://github.com/intel/gmmlib/archive/intel-gmmlib-20.3.3.tar.gz
    plugin: cmake
    configflags: [ "-DCMAKE_INSTALL_PREFIX=/usr" ]
    build-packages:
      - g++
      - sed
    override-build: |
      if [ $(arch) = "x86_64" -o $(arch) = "i686" ]; then
        snapcraftctl build
        find $SNAPCRAFT_PART_INSTALL -name libigdgmm.so -print | xargs strip
      fi
    override-stage: |
      if [ $(arch) = "x86_64" -o $(arch) = "i686" ]; then
        snapcraftctl stage
        sed -i -e 's|includedir=/usr|includedir=${prefix}|' \
               -e 's|libdir=/usr|libdir=${prefix}|' \
               usr/lib/$SNAPCRAFT_ARCH_TRIPLET/pkgconfig/igdgmm.pc
      fi
    prime:
      - -usr/include
      - -usr/lib/*/pkgconfig

  # iHD_drv_video.so
  intel-media-driver:
    after: [ libva, intel-gmmlib ]
    source: https://github.com/intel/media-driver/archive/intel-media-20.3.0.tar.gz
    plugin: cmake
    configflags: [ "-DCMAKE_INSTALL_PREFIX=/usr", "-DCMAKE_CXX_FLAGS='-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64'" ]
    build-packages:
      - binutils
      - findutils
      - g++
      - libpciaccess-dev
    override-build: |
      if [ $(arch) = "i686" ]; then
        sed -i -e 's|-m${ARCH}||' \
               $SNAPCRAFT_PART_SRC/media_driver/cmake/linux/media_compile_flags_linux.cmake
      fi
      if [ $(arch) = "x86_64" -o $(arch) = "i686" ]; then
        snapcraftctl build
        find $SNAPCRAFT_PART_INSTALL -name iHD_drv_video.so -print | xargs strip
        find $SNAPCRAFT_PART_INSTALL -name libigfxcmrt.so -print | xargs strip
      fi
    stage-packages:
      - on amd64,i386:
        - libpciaccess0
    prime:
      - -usr/include
      - -usr/lib/*/pkgconfig
      - -usr/share

  # PipeWire
  pipewire:
    source: https://gitlab.freedesktop.org/pipewire/pipewire/-/archive/0.3.26/pipewire-0.3.26.tar.gz
    plugin: meson
    meson-parameters: ["--prefix=/usr", "-Dbuildtype=release", "-Dalsa=disabled", "-Dpipewire-alsa=disabled"]
    build-packages:
      - pkg-config
      - libdbus-1-dev
    stage-packages:
      - libdbus-1-3
      - libsystemd0
